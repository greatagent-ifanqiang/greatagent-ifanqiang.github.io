<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html [
  <!ENTITY % htmlDTD
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "DTD/xhtml1-strict.dtd">
  %htmlDTD;
  <!ENTITY % globalDTD
    SYSTEM "chrome://global/locale/global.dtd">
  %globalDTD;
  <!ENTITY % certerrorDTD
    SYSTEM "chrome://browser/locale/aboutCertError.dtd">
  %certerrorDTD;

<!-- These strings are used by Firefox's custom about:certerror page,
a replacement for the standard security certificate errors produced
by NSS/PSM via netError.xhtml. -->

<!ENTITY certerror.pagetitle  "不受信任的连接">
<!ENTITY certerror.longpagetitle "此连接不受信任">

<!-- Localization note (certerror.introPara1) - The string "#1" will
be replaced at runtime with the name of the server to which the user
was trying to connect. -->
<!ENTITY certerror.introPara1 "您想使用 &brandShortName; 来安全连接至 <b>#1</b>，但是我们无法确认此连接为安全的。">
<!ENTITY certerror.introPara2 "通常，当您尝试安全连接时，站点会出示受信任的凭据，以证明您访问的是正确的位置。然而现在，此网站的身份无法核实。">

<!ENTITY certerror.whatShouldIDo.heading "怎么办？">
<!ENTITY certerror.whatShouldIDo.content "如果您过去曾连接到此网站且没有遇到该问题，那么此错误表示可能有人试图冒充该网站，因此您应该停止浏览。">
<!ENTITY certerror.getMeOutOfHere.label "立即离开！">

<!ENTITY certerror.expert.heading "我已充分了解可能的风险">
<!ENTITY certerror.expert.content "如果您了解现在所发生的一切，您可以让 &brandShortName; 开始信任此站点的凭据。<b>即便您信任此站点，这个错误也可能表明有人试图干涉您的连接。</b>">
<!ENTITY certerror.expert.contentPara2 "不要随便添加例外，除非您知道并认同该网站不使用受信任标识的理由。">
<!ENTITY certerror.addException.label "添加例外…">

<!ENTITY certerror.technical.heading "技术细节">

]>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
<html xmlns="http://www.w3.org/1999/xhtml" style="cursor: auto ! important;">
  <head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <title>不受信任的连接</title>
    <link rel="stylesheet" href="postmessageRelay_data/aboutCertError.css" type="text/css" media="all" />
    <link rel="stylesheet" href="postmessageRelay_data/aboutCertError_002.css" type="text/css" media="all" />
    <!-- This page currently uses the same favicon as neterror.xhtml.
         If the location of the favicon is changed for both pages, the
         FAVICON_ERRORPAGE_URL symbol in toolkit/components/places/src/nsFaviconService.h
         should be updated. If this page starts using a different favicon
         than neterror.xhtml nsFaviconService->SetAndLoadFaviconForPage
         should be updated to ignore this one as well. -->
    <link rel="icon" type="image/png" id="favicon" href="chrome://global/skin/icons/warning-16.png" />

    <script type="application/javascript"><![CDATA[
      // Error url MUST be formatted like this:
      //   about:certerror?e=error&u=url&d=desc

      // Note that this file uses document.documentURI to get
      // the URL (with the format from above). This is because
      // document.location.href gets the current URI off the docshell,
      // which is the URL displayed in the location bar, i.e.
      // the URI that the user attempted to load.

      function getCSSClass()
      {
        var url = document.documentURI;
        var matches = url.match(/s\=([^&]+)\&/);
        // s is optional, if no match just return nothing
        if (!matches || matches.length < 2)
          return "";

        // parenthetical match is the second entry
        return decodeURIComponent(matches[1]);
      }

      function getDescription()
      {
        var url = document.documentURI;
        var desc = url.search(/d\=/);

        // desc == -1 if not found; if so, return an empty string
        // instead of what would turn out to be portions of the URI
        if (desc == -1)
          return "";

        return decodeURIComponent(url.slice(desc + 2));
      }

      function initPage()
      {
        // Replace the "#1" string in the intro with the hostname.  Trickier
        // than it might seem since we want to preserve the <b> tags, but
        // not allow for any injection by just using innerHTML.  Instead,
        // just find the right target text node.
        var intro = document.getElementById('introContentP1');
        function replaceWithHost(node) {
          if (node.textContent == "#1")
            node.textContent = location.host;
          else
            for(var i = 0; i < node.childNodes.length; i++)
              replaceWithHost(node.childNodes[i]);
        };
        replaceWithHost(intro);
        
        if (getCSSClass() == "expertBadCert") {
          toggle('technicalContent');
          toggle('expertContent');
        }

        // Disallow overrides if this is a Strict-Transport-Security
        // host and the cert is bad (STS Spec section 7.3) or if the
        // certerror is in a frame (bug 633691).
        if (getCSSClass() == "badStsCert" || window != top)
          document.getElementById("expertContent").setAttribute("hidden", "true");
        
        var tech = document.getElementById("technicalContentText");
        if (tech)
          tech.textContent = getDescription();
        
        addDomainErrorLink();
      }
      
      /* In the case of SSL error pages about domain mismatch, see if
         we can hyperlink the user to the correct site.  We don't want
         to do this generically since it allows MitM attacks to redirect
         users to a site under attacker control, but in certain cases
         it is safe (and helpful!) to do so.  Bug 402210
      */
      function addDomainErrorLink() {
        // Rather than textContent, we need to treat description as HTML
        var sd = document.getElementById("technicalContentText");
        if (sd) {
          var desc = getDescription();
          
          // sanitize description text - see bug 441169
          
          // First, find the index of the <a> tag we care about, being careful not to
          // use an over-greedy regex
          var re = /<a id="cert_domain_link" title="([^"]+)">/;
          var result = re.exec(desc);
          if(!result)
            return;
          
          // Remove sd's existing children
          sd.textContent = "";

          // Everything up to the link should be text content
          sd.appendChild(document.createTextNode(desc.slice(0, result.index)));
          
          // Now create the link itself
          var anchorEl = document.createElement("a");
          anchorEl.setAttribute("id", "cert_domain_link");
          anchorEl.setAttribute("title", result[1]);
          anchorEl.appendChild(document.createTextNode(result[1]));
          sd.appendChild(anchorEl);
          
          // Finally, append text for anything after the closing </a>
          sd.appendChild(document.createTextNode(desc.slice(desc.indexOf("</a>") + "</a>".length)));
        }

        var link = document.getElementById('cert_domain_link');
        if (!link)
          return;
        
        var okHost = link.getAttribute("title");
        var thisHost = document.location.hostname;
        var proto = document.location.protocol;

        // If okHost is a wildcard domain ("*.example.com") let's
        // use "www" instead.  "*.example.com" isn't going to
        // get anyone anywhere useful. bug 432491
        okHost = okHost.replace(/^\*\./, "www.");

        /* case #1: 
         * example.com uses an invalid security certificate.
         *
         * The certificate is only valid for www.example.com
         *
         * Make sure to include the "." ahead of thisHost so that
         * a MitM attack on paypal.com doesn't hyperlink to "notpaypal.com"
         *
         * We'd normally just use a RegExp here except that we lack a
         * library function to escape them properly (bug 248062), and
         * domain names are famous for having '.' characters in them,
         * which would allow spurious and possibly hostile matches.
         */
        if (endsWith(okHost, "." + thisHost))
          link.href = proto + okHost;

        /* case #2:
         * browser.garage.maemo.org uses an invalid security certificate.
         *
         * The certificate is only valid for garage.maemo.org
         */
        if (endsWith(thisHost, "." + okHost))
          link.href = proto + okHost;
          
        // If we set a link, meaning there's something helpful for
        // the user here, expand the section by default
        if (link.href && getCSSClass() != "expertBadCert")
          toggle("technicalContent");
      }
      
      function endsWith(haystack, needle) {
        return haystack.slice(-needle.length) == needle;
      }

      function toggle(id) {
        var el = document.getElementById(id);
        if (el.getAttribute("collapsed"))
          el.removeAttribute("collapsed");
        else
          el.setAttribute("collapsed", true);
      }
    ]]></script>
  </head>

  <body dir="ltr">

    <!-- PAGE CONTAINER (for styling purposes only) -->
    <div id="errorPageContainer">
    
      <!-- Error Title -->
      <div id="errorTitle">
        <h1 id="errorTitleText">此连接不受信任</h1>
      </div>
      
      <!-- LONG CONTENT (the section most likely to require scrolling) -->
      <div id="errorLongContent">
        <div id="introContent">
          <p id="introContentP1">您想使用 Firefox 来安全连接至 <b>accounts.google.com</b>，但是我们无法确认此连接为安全的。</p>
          <p>通常，当您尝试安全连接时，站点会出示受信任的凭据，以证明您访问的是正确的位置。然而现在，此网站的身份无法核实。</p>
        </div>
        
        <div id="whatShouldIDoContent">
          <h2>怎么办？</h2>
          <div id="whatShouldIDoContentText">
            <p>如果您过去曾连接到此网站且没有遇到该问题，那么此错误表示可能有人试图冒充该网站，因此您应该停止浏览。</p>
            <button id="getMeOutOfHereButton">立即离开！</button>
          </div>
        </div>
        
        <!-- The following sections can be unhidden by default by setting the
             "browser.xul.error_pages.expert_bad_cert" pref to true -->
        <h2 id="technicalContent" class="expander">
          <button onclick="toggle('technicalContent');">技术细节</button>
        </h2>
        <p id="technicalContentText">accounts.google.com 使用了无效的安全证书。

该证书仅对下列名称有效：
  *.c.docs.google.com , *.c.2mdn.net , *.c.googlevideo.com , 
*.c.pack.google.com , *.c.play.google.com , *.c.video.google.com , 
*.c.youtube.com , *.cache1.c.docs.google.com , 
*.cache1.c.play.google.com , *.cache1.c.video.google.com , 
*.cache1.c.youtube.com , *.cache2.c.docs.google.com , 
*.cache2.c.play.google.com , *.cache2.c.video.google.com , 
*.cache2.c.youtube.com , *.cache3.c.docs.google.com , 
*.cache3.c.play.google.com , *.cache3.c.video.google.com , 
*.cache3.c.youtube.com , *.cache4.c.docs.google.com , 
*.cache4.c.play.google.com , *.cache4.c.video.google.com , 
*.cache4.c.youtube.com , *.cache5.c.docs.google.com , 
*.cache5.c.play.google.com , *.cache5.c.video.google.com , 
*.cache5.c.youtube.com , *.cache6.c.docs.google.com , 
*.cache6.c.play.google.com , *.cache6.c.video.google.com , 
*.cache6.c.youtube.com , *.cache7.c.docs.google.com , 
*.cache7.c.play.google.com , *.cache7.c.video.google.com , 
*.cache7.c.youtube.com , *.cache8.c.docs.google.com , 
*.cache8.c.play.google.com , *.cache8.c.video.google.com , 
*.cache8.c.youtube.com , *.googlevideo.com  

（错误码： ssl_error_bad_cert_domain）
</p>
        
        <h2 hidden="true" id="expertContent" class="expander">
          <button onclick="toggle('expertContent');">我已充分了解可能的风险</button>
        </h2>
        <div>
          <p>如果您了解现在所发生的一切，您可以让 Firefox 开始信任此站点的凭据。<b>即便您信任此站点，这个错误也可能表明有人试图干涉您的连接。</b></p>
          <p>不要随便添加例外，除非您知道并认同该网站不使用受信任标识的理由。</p>
          <button id="exceptionDialogButton">添加例外…</button>
        </div>
      </div>
    </div>

    <!--
    - Note: It is important to run the script this way, instead of using
    - an onload handler. This is because error pages are loaded as
    - LOAD_BACKGROUND, which means that onload handlers will not be executed.
    -->
    <script type="application/javascript">initPage();</script>

  </body>
</html>